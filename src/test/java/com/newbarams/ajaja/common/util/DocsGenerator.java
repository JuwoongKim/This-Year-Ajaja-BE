package com.newbarams.ajaja.common.util;

import static com.epages.restdocs.apispec.ResourceDocumentation.*;
import static java.util.Spliterator.*;
import static java.util.Spliterators.*;
import static org.springframework.http.HttpHeaders.*;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.*;
import static org.springframework.restdocs.payload.PayloadDocumentation.*;
import static org.springframework.web.servlet.HandlerMapping.*;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import org.springframework.restdocs.mockmvc.RestDocumentationResultHandler;
import org.springframework.restdocs.payload.FieldDescriptor;
import org.springframework.test.web.servlet.ResultActions;

import com.epages.restdocs.apispec.HeaderDescriptorWithType;
import com.epages.restdocs.apispec.MockMvcRestDocumentationWrapper;
import com.epages.restdocs.apispec.ParameterDescriptorWithType;
import com.epages.restdocs.apispec.ResourceSnippetParameters;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.JsonNodeType;

import lombok.AccessLevel;
import lombok.NoArgsConstructor;

/**
 * Automatically generating rest-docs by `ResultActions` which generated by MockMvc Test
 * If API require authentication put TRUE on secured parameter
 * @see JsonParser
 * @author hejow
 */
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class DocsGenerator {
	private static final List<HeaderDescriptorWithType> BEARER_TOKEN_HEADER =
		List.of(headerWithName(AUTHORIZATION).description("Bearer Token"));

	private static final String TOKEN_REQUIRED = "[토큰 필요] ";
	private static final String INITIAL_PATH = "";

	// private final String tag;
	// private final String identifier;
	// private final String summary;
	// private final String description;
	// private final boolean secured;
	// private final ResultActions result;

	public static RestDocumentationResultHandler generate(
		String tag,
		String identifier,
		String summary,
		String description,
		boolean secured,
		ResultActions result
	) {
		List<FieldDescriptor> requestFieldDescriptors = generateRequestDescriptors(result);
		List<FieldDescriptor> responseFieldDescriptors = generateResponseDescriptors(result);
		List<ParameterDescriptorWithType> queryParameters = generateQueryParameters(result);
		List<ParameterDescriptorWithType> pathVariables = generatePathVariables(result);

		return MockMvcRestDocumentationWrapper.document(
			identifier,
			preprocessRequest(prettyPrint()),
			preprocessResponse(prettyPrint()),
			resource(ResourceSnippetParameters.builder()
				.tag(tag)
				.summary(secured ? TOKEN_REQUIRED.concat(summary) : summary)
				.description(secured ? TOKEN_REQUIRED.concat(description) : description)
				.requestHeaders(secured ? BEARER_TOKEN_HEADER : Collections.emptyList())
				.requestFields(requestFieldDescriptors)
				.responseFields(responseFieldDescriptors)
				.queryParameters(queryParameters)
				.pathParameters(pathVariables)
				.build())
		);
	}

	/**
	 * generate request FieldDescriptors
	 * @return List of FieldDescriptors, If request body is null will return emptyList()
	 */
	private static List<FieldDescriptor> generateRequestDescriptors(ResultActions result) {
		JsonNode tree = JsonParser.readTree(() -> result.andReturn().getRequest().getContentAsString());
		return tree != null ? generateDescriptors(tree, INITIAL_PATH) : Collections.emptyList();
	}

	/**
	 * generate response FieldDescriptors
	 * @throws NullPointerException when response body is null
	 * @return List of FieldDescriptors
	 */
	private static List<FieldDescriptor> generateResponseDescriptors(ResultActions result) {
		JsonNode tree = JsonParser.readTree(() -> result.andReturn().getResponse().getContentAsString());
		Objects.requireNonNull(tree, "Response Cannot Be NULL");
		return generateDescriptors(tree, INITIAL_PATH);
	}

	private static List<FieldDescriptor> generateDescriptors(JsonNode tree, String parentPath) {
		return StreamSupport.stream(spliteratorUnknownSize(tree.fields(), ORDERED), false)
			.flatMap(entry -> {
				String key = entry.getKey();
				JsonNode value = entry.getValue();
				JsonNodeType type = value.getNodeType();
				String path = parentPath.isBlank() ? key : parentPath.concat(String.format(".%s", key));
				return createDescriptorByType(value, path, type);
			})
			.toList();
	}

	private static Stream<FieldDescriptor> createDescriptorByType(JsonNode value, String path, JsonNodeType type) {
		return switch (type) {
			case OBJECT -> generateDescriptors(value, path).stream();
			case ARRAY -> StreamSupport.stream(spliteratorUnknownSize(value.elements(), ORDERED), false)
				.flatMap(item -> item.isObject()
					? generateDescriptors(item, path.concat(".[].")).stream()
					: Stream.of(fieldWithPath(path.concat(".[].")).description("element of array"))
				);
			case BOOLEAN, NUMBER, STRING -> Stream.of(fieldWithPath(path).description(value.asText()));
			default -> throw new UnsupportedOperationException();
		};
	}

	private static List<ParameterDescriptorWithType> generateQueryParameters(ResultActions result) {
		Map<String, String[]> parameterMap = result.andReturn().getRequest().getParameterMap();
		return parameterMap.entrySet().stream()
			.map(entry -> parameterWithName(entry.getKey()).description(String.join("", entry.getValue())))
			.toList();
	}

	private static List<ParameterDescriptorWithType> generatePathVariables(ResultActions result) {
		Object attribute = result.andReturn().getRequest().getAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE);
		return ((Map<?, ?>)attribute).entrySet().stream()
			.map(entry -> parameterWithName(String.valueOf(entry.getKey())).description(entry.getValue()))
			.toList();
	}
}
